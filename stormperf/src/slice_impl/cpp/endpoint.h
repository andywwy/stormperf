// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `endpoint.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef _____slice_impl_cpp_endpoint_h__
#define _____slice_impl_cpp_endpoint_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace EndPointCtrl
{

class EndPointCtrlInt;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::EndPointCtrl::EndPointCtrlInt>&);
::IceProxy::Ice::Object* upCast(::IceProxy::EndPointCtrl::EndPointCtrlInt*);

}

}

namespace EndPointCtrl
{

class EndPointCtrlInt;
bool operator==(const EndPointCtrlInt&, const EndPointCtrlInt&);
bool operator<(const EndPointCtrlInt&, const EndPointCtrlInt&);
::Ice::Object* upCast(::EndPointCtrl::EndPointCtrlInt*);
typedef ::IceInternal::Handle< ::EndPointCtrl::EndPointCtrlInt> EndPointCtrlIntPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::EndPointCtrl::EndPointCtrlInt> EndPointCtrlIntPrx;
void __patch(EndPointCtrlIntPtr&, const ::Ice::ObjectPtr&);

}

namespace EndPointCtrl
{

enum TransType
{
    tcp,
    udp,
    sctp
};

struct Endpoint
{
    ::std::string ctrlAddr;
    ::std::string svcAddr;

    bool operator==(const Endpoint& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ctrlAddr != __rhs.ctrlAddr)
        {
            return false;
        }
        if(svcAddr != __rhs.svcAddr)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Endpoint& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ctrlAddr < __rhs.ctrlAddr)
        {
            return true;
        }
        else if(__rhs.ctrlAddr < ctrlAddr)
        {
            return false;
        }
        if(svcAddr < __rhs.svcAddr)
        {
            return true;
        }
        else if(__rhs.svcAddr < svcAddr)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Endpoint& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Endpoint& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Endpoint& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Endpoint& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Pair
{
    ::std::string uuid;
    ::EndPointCtrl::TransType type;
    ::Ice::Int ipver;
    ::EndPointCtrl::Endpoint ep1;
    ::EndPointCtrl::Endpoint ep2;

    bool operator==(const Pair& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(uuid != __rhs.uuid)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(ipver != __rhs.ipver)
        {
            return false;
        }
        if(ep1 != __rhs.ep1)
        {
            return false;
        }
        if(ep2 != __rhs.ep2)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Pair& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(uuid < __rhs.uuid)
        {
            return true;
        }
        else if(__rhs.uuid < uuid)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(ipver < __rhs.ipver)
        {
            return true;
        }
        else if(__rhs.ipver < ipver)
        {
            return false;
        }
        if(ep1 < __rhs.ep1)
        {
            return true;
        }
        else if(__rhs.ep1 < ep1)
        {
            return false;
        }
        if(ep2 < __rhs.ep2)
        {
            return true;
        }
        else if(__rhs.ep2 < ep2)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Pair& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Pair& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Pair& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Pair& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct GetResultItem
{
    ::std::string uuid;
    bool needStop;

    bool operator==(const GetResultItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(uuid != __rhs.uuid)
        {
            return false;
        }
        if(needStop != __rhs.needStop)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GetResultItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(uuid < __rhs.uuid)
        {
            return true;
        }
        else if(__rhs.uuid < uuid)
        {
            return false;
        }
        if(needStop < __rhs.needStop)
        {
            return true;
        }
        else if(__rhs.needStop < needStop)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GetResultItem& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GetResultItem& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GetResultItem& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GetResultItem& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::EndPointCtrl::Pair> Qpair;

typedef ::std::vector< ::EndPointCtrl::GetResultItem> QGetResultUuid;

struct AddPairResult
{
    ::std::string uuid;
    ::Ice::Short port;

    bool operator==(const AddPairResult& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(uuid != __rhs.uuid)
        {
            return false;
        }
        if(port != __rhs.port)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AddPairResult& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(uuid < __rhs.uuid)
        {
            return true;
        }
        else if(__rhs.uuid < uuid)
        {
            return false;
        }
        if(port < __rhs.port)
        {
            return true;
        }
        else if(__rhs.port < port)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AddPairResult& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AddPairResult& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AddPairResult& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AddPairResult& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::EndPointCtrl::AddPairResult> QaddPairResult;

enum StatsType
{
    sendbytes,
    sendbps,
    recvbytes,
    recvbps,
    retransmits,
    omitted,
    jitterms,
    lostpackets,
    packets,
    lostpercent
};

struct StatsItem
{
    ::EndPointCtrl::StatsType type;
    ::Ice::Double value;
};

typedef ::std::vector< ::EndPointCtrl::StatsItem> QstatsList;

struct StatsTimeItem
{
    ::Ice::Long timestamp;
    ::EndPointCtrl::QstatsList statslist;
};

typedef ::std::vector< ::EndPointCtrl::StatsTimeItem> QstatsTimeList;

enum PairStatus
{
    idle,
    init,
    running
};

struct PairStats
{
    ::std::string uuid;
    ::EndPointCtrl::PairStatus status;
    ::EndPointCtrl::QstatsTimeList statstimelist;
};

typedef ::std::vector< ::EndPointCtrl::PairStats> QpairStatsList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::EndPointCtrl::TransType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::EndPointCtrl::Endpoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::Endpoint, S>
{
    static void write(S* __os, const ::EndPointCtrl::Endpoint& v)
    {
        __os->write(v.ctrlAddr);
        __os->write(v.svcAddr);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::Endpoint, S>
{
    static void read(S* __is, ::EndPointCtrl::Endpoint& v)
    {
        __is->read(v.ctrlAddr);
        __is->read(v.svcAddr);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::Pair>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::Pair, S>
{
    static void write(S* __os, const ::EndPointCtrl::Pair& v)
    {
        __os->write(v.uuid);
        __os->write(v.type);
        __os->write(v.ipver);
        __os->write(v.ep1);
        __os->write(v.ep2);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::Pair, S>
{
    static void read(S* __is, ::EndPointCtrl::Pair& v)
    {
        __is->read(v.uuid);
        __is->read(v.type);
        __is->read(v.ipver);
        __is->read(v.ep1);
        __is->read(v.ep2);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::GetResultItem>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::GetResultItem, S>
{
    static void write(S* __os, const ::EndPointCtrl::GetResultItem& v)
    {
        __os->write(v.uuid);
        __os->write(v.needStop);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::GetResultItem, S>
{
    static void read(S* __is, ::EndPointCtrl::GetResultItem& v)
    {
        __is->read(v.uuid);
        __is->read(v.needStop);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::AddPairResult>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::AddPairResult, S>
{
    static void write(S* __os, const ::EndPointCtrl::AddPairResult& v)
    {
        __os->write(v.uuid);
        __os->write(v.port);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::AddPairResult, S>
{
    static void read(S* __is, ::EndPointCtrl::AddPairResult& v)
    {
        __is->read(v.uuid);
        __is->read(v.port);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::StatsType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 9;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::EndPointCtrl::StatsItem>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::StatsItem, S>
{
    static void write(S* __os, const ::EndPointCtrl::StatsItem& v)
    {
        __os->write(v.type);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::StatsItem, S>
{
    static void read(S* __is, ::EndPointCtrl::StatsItem& v)
    {
        __is->read(v.type);
        __is->read(v.value);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::StatsTimeItem>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::StatsTimeItem, S>
{
    static void write(S* __os, const ::EndPointCtrl::StatsTimeItem& v)
    {
        __os->write(v.timestamp);
        __os->write(v.statslist);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::StatsTimeItem, S>
{
    static void read(S* __is, ::EndPointCtrl::StatsTimeItem& v)
    {
        __is->read(v.timestamp);
        __is->read(v.statslist);
    }
};

template<>
struct StreamableTraits< ::EndPointCtrl::PairStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::EndPointCtrl::PairStats>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::EndPointCtrl::PairStats, S>
{
    static void write(S* __os, const ::EndPointCtrl::PairStats& v)
    {
        __os->write(v.uuid);
        __os->write(v.status);
        __os->write(v.statstimelist);
    }
};

template<class S>
struct StreamReader< ::EndPointCtrl::PairStats, S>
{
    static void read(S* __is, ::EndPointCtrl::PairStats& v)
    {
        __is->read(v.uuid);
        __is->read(v.status);
        __is->read(v.statstimelist);
    }
};

}

namespace EndPointCtrl
{

class Callback_EndPointCtrlInt_AddPairs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_AddPairs_Base> Callback_EndPointCtrlInt_AddPairsPtr;

class Callback_EndPointCtrlInt_DelPairs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_DelPairs_Base> Callback_EndPointCtrlInt_DelPairsPtr;

class Callback_EndPointCtrlInt_GetResults_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_GetResults_Base> Callback_EndPointCtrlInt_GetResultsPtr;

class Callback_EndPointCtrlInt_Ep2AddPairs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_Ep2AddPairs_Base> Callback_EndPointCtrlInt_Ep2AddPairsPtr;

class Callback_EndPointCtrlInt_Ep2DelPairs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_Ep2DelPairs_Base> Callback_EndPointCtrlInt_Ep2DelPairsPtr;

class Callback_EndPointCtrlInt_Ep2GetResults_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EndPointCtrlInt_Ep2GetResults_Base> Callback_EndPointCtrlInt_Ep2GetResultsPtr;

}

namespace IceProxy
{

namespace EndPointCtrl
{

class EndPointCtrlInt : virtual public ::IceProxy::Ice::Object
{
public:

    ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair& pairlist)
    {
        return AddPairs(pairlist, 0);
    }
    ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx)
    {
        return AddPairs(pairlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AddPairs(pairlist, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AddPairs(pairlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AddPairs(pairlist, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AddPairs(pairlist, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::EndPointCtrl::QaddPairResult&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
                ::EndPointCtrl::QaddPairResult __ret;
                try
                {
                    __ret = __proxy->end_AddPairs(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::EndPointCtrl::QaddPairResult&)> _response;
        };
        return begin_AddPairs(pairlist, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist)
    {
        return begin_AddPairs(pairlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx)
    {
        return begin_AddPairs(pairlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddPairs(pairlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddPairs(pairlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_AddPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddPairs(pairlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_AddPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddPairs(pairlist, &__ctx, __del, __cookie);
    }

    ::EndPointCtrl::QaddPairResult end_AddPairs(const ::Ice::AsyncResultPtr&);
    
private:

    ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        DelPairs(uuidlist, 0);
    }
    void DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        DelPairs(uuidlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_DelPairs(uuidlist, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DelPairs(uuidlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_DelPairs(uuidlist, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DelPairs(uuidlist, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return begin_DelPairs(uuidlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return begin_DelPairs(uuidlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelPairs(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelPairs(uuidlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_DelPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelPairs(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_DelPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelPairs(uuidlist, &__ctx, __del, __cookie);
    }

    void end_DelPairs(const ::Ice::AsyncResultPtr&);
    
private:

    void DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return GetResults(uuidlist, 0);
    }
    ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return GetResults(uuidlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetResults(uuidlist, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetResults(uuidlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetResults(uuidlist, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetResults(uuidlist, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::EndPointCtrl::QpairStatsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
                ::EndPointCtrl::QpairStatsList __ret;
                try
                {
                    __ret = __proxy->end_GetResults(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::EndPointCtrl::QpairStatsList&)> _response;
        };
        return begin_GetResults(uuidlist, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return begin_GetResults(uuidlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return begin_GetResults(uuidlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetResults(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetResults(uuidlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_GetResultsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetResults(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_GetResultsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetResults(uuidlist, &__ctx, __del, __cookie);
    }

    ::EndPointCtrl::QpairStatsList end_GetResults(const ::Ice::AsyncResultPtr&);
    
private:

    ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist)
    {
        return Ep2AddPairs(pairlist, 0);
    }
    ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx)
    {
        return Ep2AddPairs(pairlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Ep2AddPairs(pairlist, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2AddPairs(pairlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Ep2AddPairs(pairlist, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2AddPairs(pairlist, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QaddPairResult&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::EndPointCtrl::QaddPairResult&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
                ::EndPointCtrl::QaddPairResult __ret;
                try
                {
                    __ret = __proxy->end_Ep2AddPairs(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::EndPointCtrl::QaddPairResult&)> _response;
        };
        return begin_Ep2AddPairs(pairlist, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist)
    {
        return begin_Ep2AddPairs(pairlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx)
    {
        return begin_Ep2AddPairs(pairlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2AddPairs(pairlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2AddPairs(pairlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2AddPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2AddPairs(pairlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair& pairlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2AddPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2AddPairs(pairlist, &__ctx, __del, __cookie);
    }

    ::EndPointCtrl::QaddPairResult end_Ep2AddPairs(const ::Ice::AsyncResultPtr&);
    
private:

    ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        Ep2DelPairs(uuidlist, 0);
    }
    void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        Ep2DelPairs(uuidlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Ep2DelPairs(uuidlist, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2DelPairs(uuidlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Ep2DelPairs(uuidlist, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2DelPairs(uuidlist, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return begin_Ep2DelPairs(uuidlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return begin_Ep2DelPairs(uuidlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2DelPairs(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2DelPairs(uuidlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2DelPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2DelPairs(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2DelPairsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2DelPairs(uuidlist, &__ctx, __del, __cookie);
    }

    void end_Ep2DelPairs(const ::Ice::AsyncResultPtr&);
    
private:

    void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return Ep2GetResults(uuidlist, 0);
    }
    ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return Ep2GetResults(uuidlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Ep2GetResults(uuidlist, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2GetResults(uuidlist, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Ep2GetResults(uuidlist, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Ep2GetResults(uuidlist, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::EndPointCtrl::QpairStatsList&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::EndPointCtrl::QpairStatsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
                ::EndPointCtrl::QpairStatsList __ret;
                try
                {
                    __ret = __proxy->end_Ep2GetResults(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::EndPointCtrl::QpairStatsList&)> _response;
        };
        return begin_Ep2GetResults(uuidlist, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist)
    {
        return begin_Ep2GetResults(uuidlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx)
    {
        return begin_Ep2GetResults(uuidlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2GetResults(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2GetResults(uuidlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2GetResultsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2GetResults(uuidlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid& uuidlist, const ::Ice::Context& __ctx, const ::EndPointCtrl::Callback_EndPointCtrlInt_Ep2GetResultsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Ep2GetResults(uuidlist, &__ctx, __del, __cookie);
    }

    ::EndPointCtrl::QpairStatsList end_Ep2GetResults(const ::Ice::AsyncResultPtr&);
    
private:

    ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_secure(bool __secure) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_twoway() const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_oneway() const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_batchOneway() const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_datagram() const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_batchDatagram() const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_compress(bool __compress) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EndPointCtrlInt> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EndPointCtrlInt*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace EndPointCtrl
{

class EndPointCtrlInt : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace EndPointCtrl
{

class EndPointCtrlInt : virtual public ::IceDelegate::EndPointCtrl::EndPointCtrlInt,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace EndPointCtrl
{

class EndPointCtrlInt : virtual public ::IceDelegate::EndPointCtrl::EndPointCtrlInt,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace EndPointCtrl
{

class EndPointCtrlInt : virtual public ::Ice::Object
{
public:

    typedef EndPointCtrlIntPrx ProxyType;
    typedef EndPointCtrlIntPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::EndPointCtrl::QaddPairResult AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AddPairs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DelPairs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::EndPointCtrl::QpairStatsList GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetResults(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::EndPointCtrl::QaddPairResult Ep2AddPairs(const ::EndPointCtrl::Qpair&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Ep2AddPairs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Ep2DelPairs(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Ep2DelPairs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::EndPointCtrl::QpairStatsList Ep2GetResults(const ::EndPointCtrl::QGetResultUuid&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Ep2GetResults(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const EndPointCtrlInt& l, const EndPointCtrlInt& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EndPointCtrlInt& l, const EndPointCtrlInt& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace EndPointCtrl
{

template<class T>
class CallbackNC_EndPointCtrlInt_AddPairs : public Callback_EndPointCtrlInt_AddPairs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::EndPointCtrl::QaddPairResult&);

    CallbackNC_EndPointCtrlInt_AddPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QaddPairResult __ret;
        try
        {
            __ret = __proxy->end_AddPairs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EndPointCtrlInt_AddPairsPtr
newCallback_EndPointCtrlInt_AddPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_AddPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_AddPairsPtr
newCallback_EndPointCtrlInt_AddPairs(T* instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_AddPairs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_AddPairs : public Callback_EndPointCtrlInt_AddPairs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::EndPointCtrl::QaddPairResult&, const CT&);

    Callback_EndPointCtrlInt_AddPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QaddPairResult __ret;
        try
        {
            __ret = __proxy->end_AddPairs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EndPointCtrlInt_AddPairsPtr
newCallback_EndPointCtrlInt_AddPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_AddPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_AddPairsPtr
newCallback_EndPointCtrlInt_AddPairs(T* instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_AddPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EndPointCtrlInt_DelPairs : public Callback_EndPointCtrlInt_DelPairs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EndPointCtrlInt_DelPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_DelPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_DelPairs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_DelPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_DelPairs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_DelPairs : public Callback_EndPointCtrlInt_DelPairs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EndPointCtrlInt_DelPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_DelPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_DelPairs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_DelPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_DelPairsPtr
newCallback_EndPointCtrlInt_DelPairs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_DelPairs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EndPointCtrlInt_GetResults : public Callback_EndPointCtrlInt_GetResults_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::EndPointCtrl::QpairStatsList&);

    CallbackNC_EndPointCtrlInt_GetResults(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QpairStatsList __ret;
        try
        {
            __ret = __proxy->end_GetResults(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EndPointCtrlInt_GetResultsPtr
newCallback_EndPointCtrlInt_GetResults(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_GetResults<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_GetResultsPtr
newCallback_EndPointCtrlInt_GetResults(T* instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_GetResults<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_GetResults : public Callback_EndPointCtrlInt_GetResults_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::EndPointCtrl::QpairStatsList&, const CT&);

    Callback_EndPointCtrlInt_GetResults(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QpairStatsList __ret;
        try
        {
            __ret = __proxy->end_GetResults(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EndPointCtrlInt_GetResultsPtr
newCallback_EndPointCtrlInt_GetResults(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_GetResults<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_GetResultsPtr
newCallback_EndPointCtrlInt_GetResults(T* instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_GetResults<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EndPointCtrlInt_Ep2AddPairs : public Callback_EndPointCtrlInt_Ep2AddPairs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::EndPointCtrl::QaddPairResult&);

    CallbackNC_EndPointCtrlInt_Ep2AddPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QaddPairResult __ret;
        try
        {
            __ret = __proxy->end_Ep2AddPairs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EndPointCtrlInt_Ep2AddPairsPtr
newCallback_EndPointCtrlInt_Ep2AddPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2AddPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_Ep2AddPairsPtr
newCallback_EndPointCtrlInt_Ep2AddPairs(T* instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2AddPairs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_Ep2AddPairs : public Callback_EndPointCtrlInt_Ep2AddPairs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::EndPointCtrl::QaddPairResult&, const CT&);

    Callback_EndPointCtrlInt_Ep2AddPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QaddPairResult __ret;
        try
        {
            __ret = __proxy->end_Ep2AddPairs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2AddPairsPtr
newCallback_EndPointCtrlInt_Ep2AddPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2AddPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2AddPairsPtr
newCallback_EndPointCtrlInt_Ep2AddPairs(T* instance, void (T::*cb)(const ::EndPointCtrl::QaddPairResult&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2AddPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EndPointCtrlInt_Ep2DelPairs : public Callback_EndPointCtrlInt_Ep2DelPairs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EndPointCtrlInt_Ep2DelPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2DelPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2DelPairs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2DelPairs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2DelPairs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_Ep2DelPairs : public Callback_EndPointCtrlInt_Ep2DelPairs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EndPointCtrlInt_Ep2DelPairs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2DelPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2DelPairs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2DelPairs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2DelPairsPtr
newCallback_EndPointCtrlInt_Ep2DelPairs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2DelPairs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EndPointCtrlInt_Ep2GetResults : public Callback_EndPointCtrlInt_Ep2GetResults_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::EndPointCtrl::QpairStatsList&);

    CallbackNC_EndPointCtrlInt_Ep2GetResults(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QpairStatsList __ret;
        try
        {
            __ret = __proxy->end_Ep2GetResults(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EndPointCtrlInt_Ep2GetResultsPtr
newCallback_EndPointCtrlInt_Ep2GetResults(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2GetResults<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EndPointCtrlInt_Ep2GetResultsPtr
newCallback_EndPointCtrlInt_Ep2GetResults(T* instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EndPointCtrlInt_Ep2GetResults<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EndPointCtrlInt_Ep2GetResults : public Callback_EndPointCtrlInt_Ep2GetResults_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::EndPointCtrl::QpairStatsList&, const CT&);

    Callback_EndPointCtrlInt_Ep2GetResults(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::EndPointCtrl::EndPointCtrlIntPrx __proxy = ::EndPointCtrl::EndPointCtrlIntPrx::uncheckedCast(__result->getProxy());
        ::EndPointCtrl::QpairStatsList __ret;
        try
        {
            __ret = __proxy->end_Ep2GetResults(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2GetResultsPtr
newCallback_EndPointCtrlInt_Ep2GetResults(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2GetResults<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EndPointCtrlInt_Ep2GetResultsPtr
newCallback_EndPointCtrlInt_Ep2GetResults(T* instance, void (T::*cb)(const ::EndPointCtrl::QpairStatsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EndPointCtrlInt_Ep2GetResults<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
